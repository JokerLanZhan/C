#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include <string.h>

//int main()
//{
//
//	return 0;
//}



//#define 定义的标识符常量
//#define MAX 100
//#define 还可以定义宏；宏是带参数的

//函数的实现
//int Max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
////宏的定义方式
//#define MAX(X,Y) (X>Y?X:Y)
//int main()
//{
//	//int a = MAX;
//	int a = 10;
//	int b = 20;
//	//函数
//	int max = Max(a, b);
//	printf("max = %d\n", max);
//	//宏的方式
//	max = MAX(a, b);
//	//max = (a>b ? a:b)
//	printf("max = %d\n", max);
//
//	return 0;
//}



//static 修饰函数
//也是改变了函数的作用域 - 说法不准确
//static 修饰函数改变了函数的链接属性
//正常的一个函数是具有外部链接属性，static修饰之后就变成了内部链接属性
//声明外部函数
//extern int Add(int, int);
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("sum = %d\n", sum );
//	return 0;
//}

//static 修饰全局变量
//改变了全局变量的作用域，让静态的全局变量只能在自己所在的源文件内部使用，出了源文件就没法使用了
//int main()
//{
//	//extern 用来声明外部符号的
//	extern int g_val;
//	printf("%d\n", g_val);
//	return 0;
//}

//static 修饰局部变量
//改变了局部变量的生命周期延长
//void test()
//{
//	static int a =1;//a 是一个静态的局部变量
//	a++;
//	printf("a = %d\n", a);//2 3 4 5 6 
//}
//int main()
//{
//	int i = 0;
//	while(i < 5)
//	{
//		test();
//		i++;
//	}
//	return 0;
//}



//int mian()
//{
//	//自己定义的符号名不能和关键字冲突/一样
//	//int float;//err
//	
//	//typedef :类型定义/类型重定义
//	//例子：你的名字叫张三  - 小名叫小三，也就是别名
//	typedef unsigned int u_int;
//	unsigned int num = 20;
//	u_int num2 = 20;
//
//	return 0;
//}



//int main()
//{
//	//register int a =10;//建议把a定义成寄存器变量
//	int a = 10;
//	a = -2;
//	//int 定义的变量是有符号的
//	//signed int  =int;
//	//unsigned int num = 1;//无符号数
//
//	//struct :结构体关键字
//	//union :联合体/共用体
//	return 0;
//}



//int main()
//{
//	/*auto 默认省略*/ int a = 10;//局部变量也叫自动变量
//	return 0;
//}



//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
////{
////	//int arr[10] = { 0 };
////	//arr[4];//[] 下标引用操作符
////	int a = 10;
////	int b = 20;
////	int sum = Add(a,b);//() 函数调用操作符
////	return 0;
////}



//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = 0;
//
//	max = (a > b ? a : b);
//	if (a > b)
//		max = a;
//	else
//		max = b;
//	return 0;
//}



//int main()
//{
//	//非0 表示 真
//	//0 表示 假
//	
//	// &&  逻辑与
//	//int a = 3;
//	//int b = 5;
//	//int c = a && b;
//	//printf("c = %d\n", c);
//
//	// ||  逻辑或
//	int a = 3;
//	int b = 5;
//	int c = a || b;
//	printf("c = %d\n", c);
//	return 0;
//}



//int main()
//{
//	int a = (int)3.14;//double类型 转换为 int类型
//	return 0;
//}



//int main()
//{
//	int a = 10;
//	//int b = a++;//后置++，使用方式：先使用，再++；即先赋值，再加减
//	//printf("a = %d b = %d\n", a, b);//a = 11;b = 10
//	
//	//int b = ++a;//前置++，使用方式：先++，再使用；即先加减，再赋值
//	//printf("a = %d b = %d\n", a, b);//a = 11;b = 11
//	
//	//int b = a--;//后置--，先--，再使用
//	//printf("a = %d b = %d\n", a, b);//a = 9;b = 10
//
//	int b = --a;//前置--，先--，再使用
//	printf("a = %d b = %d\n", a, b);//a = 9;b = 9
//	return 0;
//}



//int main()
//{
//	int a = 0;//4个字节，32个bit位
//	int b =~a;//b是有符号的整型
//	// ~ :叫按位（2进制位）取反
//	//按位取反意思是：举例 1010 的取反为 0101
//	//0000 0000 0000 0000 0000 0000 0000 0000
//	//1111 1111 1111 1111 1111 1111 1111 1111
//	//原码、反码、补码  
//	//原码符号位不变，其他位取反，得到反码；反码加一得到补码
//	//补码减一得到反码，反码符号位不变，其他位取反，得到原码
//	
//	//复数在内存中存储的时候，存储的是二进制的补码
//	//假设这是补码：1111 1111 1111 1111 1111 1111 1111 1111
//	//则反码为1111 1111 1111 1111 1111 1111 1111 1110
//	//则原码为：1000 0000 0000 0000 0000 0000 0000 0001
//	printf("%d\n", b);//使用的，打印的是这个是的原码
//	return 0;
//}


//#include <stdio.h>
//#include <string.h>
//int main()
//{
//	int a = 10;
//	int arr[] = {1, 2, 3, 4, 5, 6};// 6*4 = 24
//	//sizeof 是操作符，不是函数
//	printf("%d\n", sizeof(a));//4
//	printf("%d\n", sizeof(int));//4
//	printf("%d\n", sizeof a);//4
//	//printf("%d\n", sizeof int);//err
//	printf("%d\n", sizeof(arr));//计算数组大小，单位是字节
//	printf("%d\n", sizeof(arr)/sizeof(arr[0]));//6
//	return 0;
//}


//int Max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else 
//		return y;
//}
//int main()
//{
//	int num1 = 10;
//	int num2 = 20;
//	int max = 0;
//	max = Max(num1, num2);
//	printf("max = %d\n", max);
//
//	//int num1 = 10;
//	//int num2 = 20;
//	//if (num1 > num2)
//	//	printf("较大值是%d\n", num1);
//	//else
//	//	printf("较大值是：%d\n", num2);
//	return 0;
//}



//int main()
//{
//	printf("%d\n", strlen("c:\test\121"));
//	return 0;
//}



//int main()
//{
//	//字符串的结束标志是：'\0'
//	//"abcdef\0";
//	// '\0' - 转义字符 - ASCII码值是：0
//	// 0 - 数字0
//	// '0' - 字符0 - ASCII码值是：48
//	// EOF - end of file - 叫文件结束标志 - 本质上的值是：-1
//	return 0;
//}
